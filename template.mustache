{{#ts}}
{{#dependencies}}
import {{{name}}} from "{{{path}}}";
{{/dependencies}}
{{/ts}}
{{^ts}}
{{#es}}
{{#dependencies}}
import {{{name}}} from "{{{path}}}";
{{/dependencies}}
{{/es}}
{{^es}}
{{#dependencies}}
const {{{name}}} = require("{{{path}}}");
{{/dependencies}}
{{/es}}
{{/ts}}

{{#ts}}
const convertUrl = (path: string, params: object | {}, query: any | {}) => {
{{/ts}}
{{^ts}}
const convertUrl = (path, params, query) => {
{{/ts}}
    const queryString = new URLSearchParams(query).toString();
    const urlPath = path.replace(/{(.*?)}/g, (m, c) => params[c]);
    const url = `${urlPath}${queryString ? `?${queryString}` : ""}`;
    return url;
};

class ValidationError extends Error {
    constructor(message{{#ts}}: any[]{{/ts}}) {
        const stack{{#ts}}: string[]{{/ts}} = [];

        message.forEach(err => {
            stack.push(`${err.instancePath} ${err.message}, got "${typeof err.data}"`);
        });

        super(stack.join(', '));
        this.name = "ValidationError";
    }
}

class Client {
    {{#ts}}
    instance: any;
    {{#validation}}
    validator: Ajv;
    {{/validation}}
    {{/ts}}

    {{#ts}}
        constructor(options: CreateAxiosDefaults<any> | undefined) {
    {{/ts}}
    {{^ts}}
        constructor(options) {
    {{/ts}}
        this.instance = axios.create(options);
        {{#validation}}
        this.validator = new Ajv();
                this.validator.addKeyword({
            keyword: 'xml'
        });

        this.validator.addKeyword({
            keyword: 'example'
        });

        this.validator.addFormat('int32', (data{{#ts}}: any{{/ts}}) => {
            return !isNaN(data) && data >= -2147483648 && data <= 2147483647;
        });

        this.validator.addFormat('int64', (data{{#ts}}: any{{/ts}}) => {
            return !isNaN(data) && data >= -9223372036854775808n && data <= 9223372036854775807n;
        });

        this.validator.addFormat('float', (data{{#ts}}: any{{/ts}}) => {
            return !isNaN(data) && data >= -3.402823e+38 && data <= 3.402823e+38;
        });

        this.validator.addFormat('double', (data{{#ts}}: any{{/ts}}) => {
            return !isNaN(data) && data >= -1.7976931348623157e+308 && data <= 1.7976931348623157e+308;
        });
        {{/validation}}
    }

    {{#paths}}
    {{! Methods }}
    /**
      * {{{description}}}
      * @param {Object} args
      * @param {Object} args.params Path parameters
      * @param {Object} args.query Query parameters
      * @param {Object} args.body Request body
      * @param {Object} args.options Axios request options
      * @returns {Promise<Object>} Response
    */
    {{#ts}}
    async {{operationId}}(args: {
        params: object | {}; query: object | {}; body: any | {}; options: any | {}
    }): Promise < object > {
        return new Promise(async (resolve, reject) => {
            try {
                const { params, query, body, options } = args;
    {{/ts}}
    {{^ts}}
    async {{operationId}}({
        params = {},
        query = {},
        body = {},
        options = {}
    }) {
        return new Promise(async (resolve, reject) => {
            try {
    {{/ts}}
            {{#validation}}
                {{#paramsSchema}}
                const paramsValidation = this.validator.compile({{{paramsSchema}}})
                if (!paramsValidation?.schemaEnv?.validate?.(params) && paramsValidation?.errors != undefined) throw new ValidationError(paramsValidation?.errors);
                {{/paramsSchema}}
                {{#querySchema}}
                const queryValidation = this.validator.compile({{{querySchema}}})
                if (!queryValidation?.schemaEnv?.validate?.(query) && queryValidation?.errors != undefined) throw new ValidationError(queryValidation?.errors);
                {{/querySchema}}
                {{#bodySchema}}
                const bodyValidation = this.validator.compile({{{bodySchema}}})
                if (!bodyValidation?.schemaEnv?.validate?.(body) && bodyValidation?.errors != undefined) throw new ValidationError(bodyValidation?.errors);
                {{/bodySchema}}

                {{#requestBodySchema}}
                const requestBodyValidation = this.validator.compile({{{requestBodySchema}}})
                if (!requestBodyValidation?.schemaEnv?.validate?.(body) && requestBodyValidation?.errors != undefined) throw new ValidationError(requestBodyValidation?.errors);
                {{/requestBodySchema}}
            {{/validation}}

            {{#isPost}}
                {{#isXML}}
                const builder = new xml2js.Builder();
                body = builder.buildObject(body);
                {{/isXML}}
                {{#isFormData}}
                const formData = new FormData();
                for (const key in body) formData.append(key, body[key]);
                body = formData;
                {{/isFormData}}
                {{#isUrlEncoded}}
                body = new URLSearchParams(body).toString();
                {{/isUrlEncoded}}
            {{/isPost}}
                if (!options?.headers) options.headers = {};
                options.headers["content-type"] = "{{{contentType}}}";

                const url = convertUrl("{{{path}}}", params, query);

                const response = await this.instance({
                    method: "{{method}}",
                    url,
                    params,
                    data: body,
                    ...options,
                });

                resolve(response);

            } catch (error) {
                reject(error);
            }
        });
    }
    {{/paths}}
}
{{! Export }}
{{#ts}}
{{! TypeScript }}
export default Client;
{{/ts}}
{{^ts}}
{{#es}}
{{! ES }}
export default Client;
{{/es}}
{{^es}}
{{! CommonJS }}
module.exports = Client;
{{/es}}
{{/ts}}
